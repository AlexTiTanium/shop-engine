<?php

namespace ODM\Proxies\__CG__\Documents\Users;

use Doctrine\ODM\MongoDB\Persisters\DocumentPersister;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class SessionStorage extends \Documents\Users\SessionStorage implements \Doctrine\ODM\MongoDB\Proxy\Proxy
{
    private $__documentPersister__;
    public $__identifier__;
    public $__isInitialized__ = false;
    public function __construct(DocumentPersister $documentPersister, $identifier)
    {
        $this->__documentPersister__ = $documentPersister;
        $this->__identifier__ = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->__documentPersister__) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->__documentPersister__->load($this->__identifier__, $this) === null) {
                throw \Doctrine\ODM\MongoDB\DocumentNotFoundException::documentNotFound(get_class($this), $this->__identifier__);
            }
            unset($this->__documentPersister__, $this->__identifier__);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return $this->__identifier__;
        }
        $this->__load();
        return parent::getId();
    }

    public function setSid($sid)
    {
        $this->__load();
        return parent::setSid($sid);
    }

    public function getSid()
    {
        $this->__load();
        return parent::getSid();
    }

    public function setUserId($userId)
    {
        $this->__load();
        return parent::setUserId($userId);
    }

    public function getUserId()
    {
        $this->__load();
        return parent::getUserId();
    }

    public function setIp($ip)
    {
        $this->__load();
        return parent::setIp($ip);
    }

    public function getIp()
    {
        $this->__load();
        return parent::getIp();
    }

    public function setNow($now)
    {
        $this->__load();
        return parent::setNow($now);
    }

    public function getNow()
    {
        $this->__load();
        return parent::getNow();
    }

    public function setRememberMe($rememberMe)
    {
        $this->__load();
        return parent::setRememberMe($rememberMe);
    }

    public function getRememberMe()
    {
        $this->__load();
        return parent::getRememberMe();
    }

    public function setExpSession($expSession)
    {
        $this->__load();
        return parent::setExpSession($expSession);
    }

    public function getExpSession()
    {
        $this->__load();
        return parent::getExpSession();
    }

    public function setExpOnline($expOnline)
    {
        $this->__load();
        return parent::setExpOnline($expOnline);
    }

    public function getExpOnline()
    {
        $this->__load();
        return parent::getExpOnline();
    }

    public function setUser(\Documents\User $user)
    {
        $this->__load();
        return parent::setUser($user);
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }

    public function toArray()
    {
        $this->__load();
        return parent::toArray();
    }

    public function toFlatArray($removeFromResult = false)
    {
        $this->__load();
        return parent::toFlatArray($removeFromResult);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'sid', 'user_id', 'ip', 'now', 'remember_me', 'exp_session', 'exp_online', 'user');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->__documentPersister__) {
            $this->__isInitialized__ = true;
            $class = $this->__documentPersister__->getClassMetadata();
            $original = $this->__documentPersister__->load($this->__identifier__);
            if ($original === null) {
                throw \Doctrine\ODM\MongoDB\MongoDBException::documentNotFound(get_class($this), $this->__identifier__);
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->__documentPersister__, $this->__identifier__);
        }
        
    }
}